# Server Configuration
server.port=8080

# Database Configuration
spring.datasource.url=jdbc:postgresql://localhost:5432/expensedb
spring.datasource.username=username
spring.datasource.password=password
spring.datasource.driver-class-name=org.postgresql.Driver

# JPA/Hibernate Configuration
spring.jpa.hibernate.ddl-auto=validate
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# Flyway Configuration
spring.flyway.enabled=true
spring.flyway.locations=classpath:db/migration

# JWT Configuration
jwt.secret=enter your security key here 
jwt.expiration.ms=36000000000 

# File Storage Configuration
file.storage.upload-dir=./expense-system-attachments

# Actuator - Show all details for health endpoint
management.endpoint.health.show-details=always
# management.endpoints.web.exposure.include=* # Uncomment to expose all actuator endpoints (use with caution)
management.endpoints.web.exposure.include=health,info,metrics,prometheus

# Logging
# Set your base package to DEBUG for more logs
logging.level.ZIDIO.Development.ENTERPRISE.EXPENSE.MANAGEMENT.SYSTEM=DEBUG
logging.level.org.springframework.security=DEBUG 
# logging.level.org.hibernate.SQL=DEBUG # Redundant if spring.jpa.show-sql=true
# logging.level.org.hibernate.type.descriptor.sql=TRACE # To see bound parameters if needed

# Email Configuration (Brevo / Sendinblue Example)
spring.mail.host=smtp-relay.brevo.com 
spring.mail.port=587                  
spring.mail.username=your user name
spring.mail.password=your password

spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true 
# spring.mail.properties.mail.smtp.ssl.enable=true # Only if using port 465 (SSL) and disable starttls
# spring.mail.properties.mail.debug=true # Optional: Set to true for verbose mail sending logs in console (good for debugging)
spring.mail.default-encoding=UTF-8

# You might also want to set a default 'from' address if your EmailService doesn't set it
# spring.mail.from=notifications@yourdomain.com # Requires sender verification in Brevo for good deliverability


# OAuth2 Client Configuration (Google)
spring.security.oauth2.client.registration.google.client-id=your google key
spring.security.oauth2.client.registration.google.client-secret=your google key secrete
spring.security.oauth2.client.registration.google.scope=
# spring.security.oauth2.client.registration.google.redirect-uri={baseUrl}/login/oauth2/code/{registrationId} # Default is fine
# spring.security.oauth2.client.provider.google.user-name-attribute=sub # Default is 'sub' for OIDC providers like Google


# This should be the base URL of your frontend application
# It's used for postMessage origin verification and potentially for the final redirect *from* your success handler
# if you weren't using the postMessage method.
# For postMessage, this is the origin the popup will send the message TO.
app.oauth2.authorizedRedirectUris[0]=http://localhost
# Add other frontend origins if needed for different environments
# app.oauth2.authorizedRedirectUris[1]=https://yourproductionfrontend.com
